
// Just a wrapper to reduce IOs for small FPGA synthesis. Barely enough logic to make the optimizer not optimize it out. The proper one requires too many IOs
module BitSerialMatrixMultiplyTinyIO {
    interface BitSerialMatrixMultiplyTinyIO : bool start, int value -> bool finish, int result

    BitSerialMatrixMultiplySpecific bsmm

    state int[10] stored_values
    state int last_value_use_as_addr
    last_value_use_as_addr = value
    stored_values[last_value_use_as_addr] = value
    finish, int[15] r = bsmm(start, stored_values)

    result = r[last_value_use_as_addr]
}


module BitSerialMatrixMultiplySpecific {
    interface BitSerialMatrixMultiplySpecific : 
        bool start'0, int[10] values'0 -> bool finish'36, int[15] result'36

    gen int[10][15] MATRIX

    for int X in 0..15 {
        for int Y in 0..10 {
            if ((X + Y) * 7 + ((X+1)*10) / (Y+1)) % 4 == 0 {
                MATRIX[X][Y] = (X + 2*Y)
            } else {
                MATRIX[X][Y] = 0
            }
        }
    }
    
    BitSerialMatrixMultiply #(WIDTH: 10, HEIGHT: 15, MATRIX) bsmm

    finish = start
    result = bsmm(start, values)
}



module BitSerialMatrixMultiply #(int WIDTH, int HEIGHT, int[WIDTH][HEIGHT] MATRIX) {
    // 32 right now, because ints are't sized yet. 
    gen int INT_BITWIDTH = 32

    interface BitSerialMatrixMultiply : bool start, int[WIDTH] values -> int[HEIGHT] result

    BitShifter #(WIDTH, INT_BITWIDTH: 32) shifter
    FixedSizeIterator #(UP_TO: 32) iter
    BitSerialMatrixMultiplyState #(WIDTH, HEIGHT, MATRIX) bsm_state

    shifter.start(start, values)
    iter.start(start)
    bsm_state.start(start)
    
    bool[WIDTH] bits = shifter.shift(iter.valid)
    bsm_state.feed(iter.valid, bits)

    result = LatencyOffset #(OFFSET: INT_BITWIDTH+1, T: type int[HEIGHT])(bsm_state.result_vector)
}

module BitShifter #(int WIDTH, int INT_BITWIDTH) {
    interface start : bool start, int[WIDTH] values
    interface shift : bool shift -> bool[WIDTH] bits

    state bool[WIDTH][INT_BITWIDTH] split_into_bits

    if start {
        // initialize split_into_bits
        for int I in 0..WIDTH {
            bool[INT_BITWIDTH] value_bits = IntToBits(values[I])

            for int BIT in 0..INT_BITWIDTH {
                split_into_bits[BIT][I] = value_bits[BIT]
            }
        }
    } else if shift {
        for int BIT in 1..INT_BITWIDTH {
            split_into_bits[BIT] = split_into_bits[BIT - 1]
        }
    }
    if shift {
        bits = split_into_bits[INT_BITWIDTH - 1]
    }
}

module BitSerialMatrixMultiplyState #(int WIDTH, int HEIGHT, int[WIDTH][HEIGHT] MATRIX) {
    interface start : bool start
    interface feed : bool feed, bool[WIDTH] vector_bits

    output state int[HEIGHT] result_vector

    for int Y in 0..HEIGHT {
        BitSerialRow #(SIZE: WIDTH, WEIGHTS: MATRIX[Y]) row

        if start {
            result_vector[Y] = 0
        } else if feed {
            result_vector[Y] = result_vector[Y] * 2 + row(vector_bits)
        }
    }
}

module BitSerialRow #(int SIZE, int[SIZE] WEIGHTS) {
    interface BitSerialRow : bool[SIZE] bits'0 -> int row_total

    gen int NONZERO_COUNT = 0
    for int I in 0..SIZE {
        if WEIGHTS[I] != 0 {NONZERO_COUNT = NONZERO_COUNT + 1}
    }

    if NONZERO_COUNT == 0 {
        int zero'0 = 0
        row_total = zero
    } else {
        int[NONZERO_COUNT] nonzero_weights
        gen int CURRENT_NONZERO_COUNT = 0

        for int I in 0..SIZE {
            gen int CUR_WEIGHT = WEIGHTS[I]

            if CUR_WEIGHT != 0 {
                if bits[I] {
                    nonzero_weights[CURRENT_NONZERO_COUNT] = WEIGHTS[I]
                } else {
                    nonzero_weights[CURRENT_NONZERO_COUNT] = 0
                }

                CURRENT_NONZERO_COUNT = CURRENT_NONZERO_COUNT + 1
            }
        }

        row_total = TreeAdd #(WIDTH: NONZERO_COUNT)(nonzero_weights)
    }
}

